generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  name             String?
  password         String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  capitalHistory   Capital_history[]
  portefeuilles    Portefeuille?
  trades           Trade[]
  tradeJournals    Trade_journal[]
  tradeScreenshots Trade_screenshot[]
}

model Trade {
  id               Int                @id @default(autoincrement())
  userId           Int
  paire            String
  entryPrice       Float
  exitPrice        Float?
  stopLoss         Float?
  takeProfit       Float?
  size_lot         Float?
  result           Float?
  risk_amount      Float
  r_multiple       Float? 
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  closedAt         DateTime?
  direction        String             @default("Long")
  status           String             @default("Open")
  capitalHistory   Capital_history[]
  user             User               @relation(fields: [userId], references: [id])
  tradeJournals    Trade_journal?
  tradeScreenshots Trade_screenshot[]
}

model Portefeuille {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  solde_initial  Decimal  @db.Decimal(10, 2)
  capital_actuel Decimal  @db.Decimal(10, 2)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model Capital_history {
  id              Int      @id @default(autoincrement())
  userId          Int
  capital         Decimal  @db.Decimal(10, 2)
  variation       Decimal  @db.Decimal(10, 2)
  source_trade_id Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  trade           Trade    @relation(fields: [source_trade_id], references: [id])
  user            User     @relation(fields: [userId], references: [id])
}

model Trade_journal {
  id                    Int                @id @default(autoincrement())
  userId                Int
  tradeId               Int                @unique
  plan_trade            String?
  emotions              String?
  indicators            String?
  post_trade_analysis   String?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  trade                 Trade              @relation(fields: [tradeId], references: [id])
  user                  User               @relation(fields: [userId], references: [id])
  tradeScreenshots      Trade_screenshot[]
}

model Trade_screenshot {
  id              Int           @id @default(autoincrement())
  userId          Int
  tradeId         Int
  Trade_journalId Int
  publicId        String
  screenshotUrl   String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  type            String        @default("Before")
  timeframe       String        @default("M15")
  tradeJournal    Trade_journal @relation(fields: [Trade_journalId], references: [id])
  trade           Trade         @relation(fields: [tradeId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
}
